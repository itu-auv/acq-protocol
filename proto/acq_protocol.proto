syntax = "proto3";

/**
 * Generic Message Types for ACQ Protocol
 */
message Types {

  /**
   * Channel Configuration
   */
  message Channels {
    bool ch0 = 1; /// Channel-0 Enabled/Disabled
    bool ch1 = 2; /// Channel-1 Enabled/Disabled
    bool ch2 = 3; /// Channel-2 Enabled/Disabled
  };

  /**
   * Sampling Time Configuration
   */
  enum SampleTime {
    ADC_SAMPLETIME_1CYCLE_5 = 0;    /// 1.5 cycle period
    ADC_SAMPLETIME_2CYCLES_5 = 1;   /// 2.5 cycle period
    ADC_SAMPLETIME_8CYCLES_5 = 2;   /// 8.5 cycle period
    ADC_SAMPLETIME_16CYCLES_5 = 3;  /// 16.5 cycle period
    ADC_SAMPLETIME_32CYCLES_5 = 4;  /// 32.5 cycle period
    ADC_SAMPLETIME_64CYCLES_5 = 5;  /// 64.5 cycle period
    ADC_SAMPLETIME_387CYCLES_5 = 6; /// 387.5 cycle period
    ADC_SAMPLETIME_810CYCLES_5 = 7; /// 810.5 cycle period
  };

  /**
   * Acquisition Mode is used to configure
   * stream/capturing behaviour.
   */
  enum AcquisitionMode {
    INVALID = 0;  /// No valid type, will return error message
    ONESHOT = 1;  /// Once buffer is filled, acquisition will stop
    CIRCULAR = 2; /// Once buffer is filled, it circles back and overwrites
    STOP = 3;     /// Stops acquisition
  };

  /**
   * Generic range type primarily used in
   * specifying frequency range indexes
   */
  message Range {
    uint32 low = 1;  /// Lower bound value
    uint32 high = 2; /// Upper bound value
  };

  /**
   * Generic message response status
   * contains success or fail flag,
   * also an error message if failed.
   */
  message ResponseStatus {
    bool success = 1; /// success/fail flag
    string msg = 2;   /// Error message (if failed)
  };

  /**
   * Function type used in setting buffers
   */
  enum FunctionType {
    SINE = 0;     /// Sine wave
    SQUARE = 1;   /// Square wave
    TRIANGLE = 2; /// Triangle wave
    SAWTOOTH = 3; /// Sawtooth wave
  }
};

/**
 * Generic ACQ Commands
 */
message ACQCommand {

  /**
   * Configures sample size,
   * sample time and active channels
   */
  message Configure {
    message Request {
      uint32 sample_size = 1;           /// Sample size
      Types.SampleTime sample_time = 2; /// Sample time
      Types.Channels channels = 3;      /// Active channels
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
    };
  };

  /**
   * Transfers buffer data of given channels,
   * from start_position to start_position + size
   */
  message Transfer {

    message Request {
      uint32 start_position = 1;   /// Start index of buffer
      uint32 size = 2;             /// Length of transfer
      Types.Channels channels = 3; /// Channels to be transferred
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
      bytes ch0 = 2;                   /// channel 0 data stream
      bytes ch1 = 3;                   /// channel 1 data stream
      bytes ch2 = 4;                   /// channel 2 data stream
    };
  }

  /**
   * Starts / stops acquisition based on the mode provided
   */
  message SetAcquisition {

    message Request {
      Types.AcquisitionMode mode = 1; /// mode (circular / oneshot / stop)
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
    };
  }

  /**
   * Calculates S-TFT for frequency range
   */
  message CalculateSTFT {

    message Request {
      uint32 nfft = 1;                 /// FFT size
      uint32 n_window = 2;             /// Window (FFT shift)
      Types.Range frequency_range = 3; /// Frequency Range (bin index)
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
      // Todo
    };
  };

  /**
   * Obtains board spesific information
   */
  message BoardInformation {

    message Request {
      bool dummy = 1; /// dummy object
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
      float firmware_version = 2;      /// Firmware version (ex: 3.5f)
      uint32 sample_size = 3;          /// Maximum sample size
      uint32 adc_clock_frequency = 4;  /// ADC clock frequency
                                       /// Used to convert sample time to freq
    };
  };

  /**
   * Obtains board spesific information
   */
  message SetBuffers {
    message Request {
      uint32 amplitude = 1;                 /// Amplitude of given function
      uint32 frequency = 2;                 /// Frequency of signal
      Types.FunctionType function_type = 3; /// Function type
      float offset_period = 4; /// Time offset x, t_off = x * period
      float repeat_period = 5; /// Repeat period x, t_signal = x * period
      uint32 reference = 6;    /// Reference value
      Types.Channels channels = 7;
    };

    message Response {
      Types.ResponseStatus status = 1; /// status
    };
  };
}

message ACQRequest {
  oneof request {
    ACQCommand.Configure.Request configure = 1;
    ACQCommand.Transfer.Request transfer = 2;
    ACQCommand.SetAcquisition.Request set_acquisition = 3;
    ACQCommand.CalculateSTFT.Request calculate_stft = 4;
    ACQCommand.BoardInformation.Request board_info = 5;
    ACQCommand.SetBuffers.Request set_buffers = 6;
  };
};

message ACQResponse {
  oneof response {
    ACQCommand.Configure.Response configure = 1;
    ACQCommand.Transfer.Response transfer = 2;
    ACQCommand.SetAcquisition.Response set_acquisition = 3;
    ACQCommand.CalculateSTFT.Response calculate_stft = 4;
    ACQCommand.BoardInformation.Response board_info = 5;
    ACQCommand.SetBuffers.Response set_buffers = 6;
  };
};